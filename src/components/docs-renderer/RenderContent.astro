---
import type { ContentData } from 'google-docs-components';
import { Renderer as VueRenderer } from "docs-renderer-vue3"
export interface Props {
  content: ContentData,
  vueComponents: { [key: string]: any }
  astroComponents: {}
  tableComponent?: Object | false,
  inlineSlotFormat?: RegExp,
  ignoreCSS?: string[],
}

const { content, astroComponents, vueComponents } = Astro.props;

const isString = typeof content == "string";
const isElement = content?.element;
const isComponent = content?.component;
const isVueComponent = vueComponents && vueComponents[isComponent];
const isAstroComponent = isComponent && !isVueComponent && astroComponents?.[isComponent];

// if (isComponent) console.log(isComponent);
// if (content?.table) console.log(content.table);
if (!isString || !isElement) {
  // console.log(content)
}
 
const stringifyStyle = (style: object) => {
  return Object.keys(style).map(key => `${key}: ${style[key]};`).join(" ");
};
---
{
  isVueComponent ? <VueRenderer content={[content]} components={vueComponents}/> : 
  isString ? content :
  isElement && <content.element style={stringifyStyle(content.style || {})}>{content.children && content.children.map(child => 
      <Astro.self content={child}/>)}</content.element>
}