---
import type { ContentData } from 'google-docs-components';
import { Renderer as VueRenderer } from "docs-renderer-vue3"
import docsDefinitions from '../../global/astro/docsDefinitions';
export interface Props {
  content: ContentData,
  slots: { [key: string]: string}
  vueComponents: { [key: string]: any }
  astroComponents: { [key: string]: any }
  tableComponent?: Object | false,
  inlineSlotFormat?: RegExp,
  ignoreCSS?: string[],
}

const { content, slots, astroComponents, ignoreCSS, vueComponents, inlineSlotFormat = /\[\^(\d*[a-zA-z]+\d*)\](?:(.+)\[\/\1\])*/g } = Astro.props;

const isString = typeof content == "string";
const isSlot = content?.slot;
const isElement = content?.element;
const isComponent = content?.component;
const isVueComponent = vueComponents && vueComponents[isComponent];
const isAstroComponent = isComponent && !isVueComponent && astroComponents?.[isComponent];
const isTable = content?.rows && content?.cells;

const component = {
  astro: isAstroComponent
}

const slotHTML = isSlot && slots[isSlot];

if (content?.cells) {
  console.log("I'm a table!", content.cells);
}

 
function stringifyStyle (style: object){
  return Object.keys(style).filter(key => !ignoreCSS || !ignoreCSS.includes(key)).map(key => `${key}: ${style[key]};`).join(" ");
};

function replaceInlineSlots (content: string) {
  return content.replace(inlineSlotFormat, (match, slotName, inner) => {
    if (slots?.[slotName]) {
      return slots[slotName].replace("$$inner", inner); 
    }
  });
}

const tableStyles = isTable && stringifyStyle({
  display: "grid",
  "place-content": "center",
  "place-items": "center",
  "grid-template-areas": content.rows.map(
      (row) => `"${row.map((i) => (i == -1 ? "." : `area${i}`)).join(" ")}"`
  )
});

---
{
  isAstroComponent ? (<><component.astro {...content?.props} namedSlots={content.slots}>
    {content?.slots?.default && content.slots.default.map(child => <Astro.self {...Astro.props} content={child} />)}
  </component.astro></>) :

  isVueComponent ? <VueRenderer ignoreCss={ignoreCSS} content={[content]} components={vueComponents}/> :

  isTable ? <div class="doc-table-root" style={tableStyles}>
      {content.cells.map( (cell, i) => <div style={`grid-area:area${i}`}>
        {cell.map(child => <Astro.self {...Astro.props} content={child}/>)}
      </div>)}
    </div> :

  isSlot ? <Fragment set:html={slotHTML} /> :
  isString ? <Fragment set:html={replaceInlineSlots(content)} /> :
  isElement && 
        <content.element style={stringifyStyle(content.style || {})}>
          {content.children && content.children.map(child => <Astro.self {...Astro.props} content={child}/>)}
        </content.element>
}