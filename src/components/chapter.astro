---
import chaptersConfig from '../../chapters-config';
import fetchDoc from "../fetch/google-doc" 
import {componentsFromDoc, findSections} from "google-docs-components"
import type {ComponentDef} from "google-docs-components"
import DocsRenderer from "./page/docs-renderer/DocsRenderer.astro";
import astroComponentDefs from "./global/astro/docsDefinitions";
import { chapterSections } from "./page/renderGroups.ts"
import { Debug } from "astro/components"
import { leftRightGroups } from './page/renderGroups';
import SectionTitle from './page/SectionTitle.astro';
import MiddleSubgrid from './page/layout/MiddleSubgrid.astro';
import LeaderFollower from './page/layout/LeaderFollower.astro';
import BaseLayout from './layouts/BaseLayout.astro';

const name = Astro.props.name;

const vueComponentFiles = (await
 Astro.glob("./**/*.vue")).filter(file => file.docsDefinition);

const astroComponentFiles = (await Astro.glob("./global/astro/*.astro")).map(file => ({
  file, 
  componentName: file.$$metadata.mockURL.pathname.split('/').pop().split('.')[0]
}));

const componentDefs = [...vueComponentFiles.map(file => file.docsDefinition), ...astroComponentDefs];

const astroComponentMap = Object.fromEntries(astroComponentFiles.map(({file, componentName}) => [componentName, file.default]));

const vueComponentMap = Object.fromEntries(
  vueComponentFiles.map( 
    (c) => ([c.docsDefinition.componentName, c.default]))
);

const chapterConfig = chaptersConfig[name];


const doc = await fetchDoc(chapterConfig.doc);

const renderData = componentsFromDoc({components: componentDefs}, doc);

const { sections, metadata } = renderData?.body && chapterSections(renderData.body)

const splitSections = sections.map((section) =>
        Object.assign({title: section.title}, {
          renderGroups: leftRightGroups(section.components),
        })
      ); 

const slotEntries = await Promise.all(
  Object.keys(Astro.slots)
  .map(
    async (slotName) => ([slotName, await Astro.slots.render(slotName)])
  )
);

const allSlots = Object.fromEntries(slotEntries);

const docsRendererProps = {
  slots: allSlots,
  ignoreCSS: [],
  vueComponents: vueComponentMap,
  astroComponents: astroComponentMap
}

//https://docs.google.com/document/d/1QnnVB0aatTRXgT6brhDWXFK951J4cEt0OZEdn7InaH4/edit
---
<BaseLayout>
<div class="chapter-root">
  {splitSections.map( ({title, renderGroups}) => {
    return <div>
      <SectionTitle>{title}</SectionTitle>
      {renderGroups.map(group => (
        group?.components ?
         <MiddleSubgrid><DocsRenderer content={group.components} {...docsRendererProps}/></MiddleSubgrid> : 
         <>
         <LeaderFollower>
            <DocsRenderer slot="left" content={group.left} {...docsRendererProps}/>
            <DocsRenderer slot="right" content={group.right} {...docsRendererProps}/>
         </LeaderFollower>
         </>
      ))}
    </div>
  })}
</div>
</BaseLayout>

<style is:global define:vars={chapterConfig.theme}>
.chapter-root .bg-theme {
  background-color: var(--primaryColor);
}

.chapter-root .text-theme {
  color: var(--primaryColorText);
}
</style>