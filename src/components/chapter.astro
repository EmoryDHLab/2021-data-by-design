---
import chaptersConfig from '../../chapters-config';
import fetchDoc from "../fetch/google-doc" 
import {componentsFromDoc, findSections} from "google-docs-components"
import type {ComponentDef} from "google-docs-components"
import PageRenderer from "./page/PageRenderer.astro";
import astroComponentDefs from "./global/astro/docsDefinitions";
import { chapterSections } from "./page/renderGroups.ts"

const name = Astro.props.name;

const vueComponentFiles = (await
 Astro.glob("./**/*.vue")).filter(file => file.docsDefinition);

const astroComponentFiles = (await Astro.glob("./global/astro/*.astro")).map(file => ({
  file, 
  componentName: file.$$metadata.mockURL.pathname.split('/').pop().split('.')[0]
}));

const componentDefs = [...vueComponentFiles.map(file => file.docsDefinition), ...astroComponentDefs];

const astroComponentMap = Object.fromEntries(astroComponentFiles.map(({file, componentName}) => [componentName, file.default]));

const vueComponentMap = Object.fromEntries(
  vueComponentFiles.map( 
    (c) => ([c.docsDefinition.componentName, c.default]))
);

const chapterConfig = chaptersConfig[name];

const doc = await fetchDoc(chapterConfig.doc);

const renderData = componentsFromDoc({components: componentDefs}, doc);

const { sections, metadata } = renderData?.body && chapterSections(renderData.body)

console.log(sections[0]);

const slotEntries = await Promise.all(
  Object.keys(Astro.slots)
  .map(
    async (slotName) => ([slotName, await Astro.slots.render(slotName)])
  )
);

const allSlots = Object.fromEntries(slotEntries);

//https://docs.google.com/document/d/1QnnVB0aatTRXgT6brhDWXFK951J4cEt0OZEdn7InaH4/edit
---
<div>
  <PageRenderer
    class="pass-through"
    slots={allSlots}
    ignoreCss={[]}
    content={renderData.body}
    vueComponents={vueComponentMap}
    astroComponents={astroComponentMap}
  >
  </PageRenderer>
</div>
