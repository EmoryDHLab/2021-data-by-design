---
import chaptersConfig from '../../chapters-config';
import fetchDoc from "../fetch/google-doc" 
import {componentsFromDoc, findSections} from "google-docs-components"
import type {ComponentDef} from "google-docs-components"
import RenderContent from "./docs-renderer/RenderContent.astro";
import Renderer from "./docs-renderer/Renderer.astro";
import TestAstro from "./global/astro/TestAstro.astro";

const name = Astro.props.name;
 
export function getStaticPaths() {
  return Object.keys(chaptersConfig).map(chapter => ({ params: { chapter } }));
}

const vueComponentFiles = (await Astro.glob("./**/*.vue")).filter(file => file.docsDefinition);

const astroComponentFiles = (await Astro.glob("./global/astro/*.astro")).map(file => ({
  file, 
  componentName: file.$$metadata.mockURL.pathname.split('/').pop().split('.')[0]
}));

const astroComponentDefs: ComponentDef[] = astroComponentFiles.map( ({componentName}) => {
  return {
    matchName: componentName,
    componentName,
    props: "any",
    slots: "any"
  }
});

const componentDefs = vueComponentFiles.map(file => file.docsDefinition)

const astroComponentMap = Object.fromEntries(astroComponentFiles.map(({file, componentName}) => [componentName, file.default]));

const vueComponentMap = Object.fromEntries(
  vueComponentFiles.map( 
    (c) => ([c.docsDefinition.componentName, c.default]))
);

const chapterConfig = chaptersConfig[name];

const doc = await fetchDoc(chapterConfig.doc);
const components = componentsFromDoc({components: componentDefs}, doc);

//https://docs.google.com/document/d/1QnnVB0aatTRXgT6brhDWXFK951J4cEt0OZEdn7InaH4/edit
---
<div>
  chapter <span class="font-bold">component</span>
  <h4> {components.title} </h4>
  <!-- <RenderContent content={}/> -->
  <Renderer
    class="pass-through"
    ignoreCss={[]}
    content={components.body}
    vueComponents={vueComponentMap}
    element-classes={ {p: [{ hi: true }, 'there'] }}
  >

  </Renderer>
  <astroComponentMap.TestAstro/>

</div>
